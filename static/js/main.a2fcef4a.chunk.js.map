{"version":3,"sources":["n1-main/m1-ui/header/Header.module.css","n1-main/m2-bll/loginReducer.ts","n1-main/m2-bll/registrationReducer.ts","n1-main/m2-bll/restorePassReducer.ts","n1-main/m2-bll/profileReducer.ts","n1-main/m2-bll/newPassReducer.ts","n1-main/m2-bll/store.ts","n2-features/f1-auth/a5-profile/Profile.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/routes/routes.ts","n1-main/m1-ui/common/input/Input.js","n1-main/m1-ui/common/button/Button.js","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a4-newPass/NewPass.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","rootReducer","combineReducers","login","state","registration","restorePass","profile","newPass","store","createStore","Profile","props","Header","className","css","logo","src","alt","to","loginBlock","isAuth","onClick","logout","Input","type","placeholder","value","onChange","autoFocus","ButtonClass","loading","spiner","name","Login","alert","Restore","Register","NewPass","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,WAAa,6B,kOCErDC,EAAe,GCDfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCKjBC,EAAcC,YAAgB,CAC9BC,MLDwB,WAA4E,IAA3EC,EAA0E,uDAAhDJ,EAC/C,OAAOI,GKCXC,aJL+B,WAA4E,IAA3ED,EAA0E,uDAAhDJ,EAC1D,OAAOI,GIKPE,YHN8B,WAA4E,IAA3EF,EAA0E,uDAAhDJ,EACzD,OAAOI,GGMPG,QFP0B,WAA4E,IAA3EH,EAA0E,uDAAhDJ,EACrD,OAAOI,GEOPI,QDR0B,WAA4E,IAA3EJ,EAA0E,uDAAhDJ,EACrD,OAAOI,KCYEK,EAAQC,YAAYT,GCLlBU,EAVC,SAACC,GACb,OACI,oCACI,0C,+BCqBGC,EArBA,SAACD,GACZ,OACI,gCACI,6BACI,yBAAKE,UAAWC,IAAIC,KACfC,IAAI,8EAA8EC,IAAI,WAE/F,kBAAC,IAAD,CAASC,GCTE,YDSX,aACA,kBAAC,IAAD,CAASA,GCbA,UDaT,aACA,kBAAC,IAAD,CAASA,GCbO,iBDahB,aACA,kBAAC,IAAD,CAASA,GCbE,gBDaX,sBACA,kBAAC,IAAD,CAASA,GCZE,YDYX,kBACA,yBAAKL,UAAWC,IAAIK,YACfR,EAAMS,OACD,6BAAMT,EAAMT,MAAZ,MAAqB,4BAAQmB,QAASV,EAAMW,QAAvB,YACrB,kBAAC,IAAD,CAASJ,GAAI,UAAb,YEEPK,G,MAnBD,SAACZ,GAEX,OACE,yBAAKE,UAAU,SACb,2BAAOW,KAAK,OAAOC,YAAcd,EAAMc,YAChCZ,UAAWF,EAAMa,KACjBE,MAAOf,EAAMe,MACbC,SAAUhB,EAAMgB,SAChBC,WAAW,OCIXC,G,MAZK,SAAClB,GACnB,IAAImB,GAA2B,IAAjBnB,EAAMoB,OAAkB,yBACpCf,IAAI,6HACJC,IAAI,KAAO,GACb,OACE,4BAAQJ,UAAS,mBAAcF,EAAMa,MAAQH,QAASV,EAAMU,SACzDS,EACAnB,EAAMqB,QCeEC,EArBD,SAACtB,GAWX,OACI,oCACI,6BACI,kBAAC,EAAD,CAAOa,KAJG,QAIeC,YAAa,cAAeC,MAAO,KAAMC,SAT7D,eAUL,kBAAC,EAAD,CAAQH,KANA,UAMgBQ,KAAM,OAASX,QAbnC,WACZa,MAAM,WAY2DH,QAAQ,IAFrE,OCLGI,EAVC,SAACxB,GACb,OACI,oCACI,mDCOGyB,EAVE,SAACzB,GACd,OACI,oCACI,2CCOG0B,EAVC,SAAC1B,GACb,OACI,oCACI,+CC0BG2B,EAlBH,WACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU9B,MAAOA,GACb,yBAAKK,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,QAAO,kBAAC,IAAD,CAAO0B,KPhB1B,WOgByCC,UAAW9B,IACnD,kBAAC,IAAD,CAAO6B,KPpBV,SOoBuBC,UAAWP,IAC/B,kBAAC,IAAD,CAAOM,KPpBH,gBOoBuBC,UAAWJ,IACtC,kBAAC,IAAD,CAAOG,KPpBR,eOoBuBC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KPnBR,WOmBuBC,UAAWH,SCXrCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAlD,GACJA,EAAamD,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2fcef4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__w-dLF\",\"loginBlock\":\"Header_loginBlock__2KSRz\"};","\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n\r\n}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n        return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const restorePassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const newPassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport {registrationReducer} from \"./registrationReducer\";\r\nimport {restorePassReducer} from \"./restorePassReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {newPassReducer} from \"./newPassReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    restorePass: restorePassReducer,\r\n    profile: profileReducer,\r\n    newPass: newPassReducer\r\n})\r\n\r\n//export type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport const store = createStore(rootReducer);","import React from \"react\";\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                Vitaliy\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport css from './Header.module.css';\r\nimport {login, newPass, profile, registration, restore} from \"../routes/routes\";\r\n\r\nconst Header = (props: any) => {\r\n    return (\r\n        <header>\r\n            <div>\r\n                <img className={css.logo}\r\n                     src=\"https://pics.clipartpng.com/midle/Deck_of_Cards_PNG_Clip_Art_Image-2722.png\" alt=\"cards\"/>\r\n            </div>\r\n            <NavLink to={profile}> Profile </NavLink>\r\n            <NavLink to={login}> Sign in </NavLink>\r\n            <NavLink to={registration}> Sign up </NavLink>\r\n            <NavLink to={restore}> Restore password </NavLink>\r\n            <NavLink to={newPass}> New password </NavLink>\r\n            <div className={css.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","export const login = '/login';\r\nexport const registration = '/registration';\r\nexport const restore = '/restorePass';\r\nexport const profile = '/profile';\r\nexport const newPass = '/newPass';","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n    // let errorClass = this.props.state.error ? 'error' : '';\n    return (\n      <div className='input'>\n        <input type=\"text\" placeholder= {props.placeholder}\n               className={props.type}\n               value={props.value}\n               onChange={props.onChange}\n               autoFocus={true}/>\n               {/*<input type=\"text\" placeholder='Write name'\n               className={css[errorClass]}\n               onKeyPress={this.props.onKeyPress}\n               onChange={this.props.changeTitle}\n               value={this.props.state.title}\n               autoFocus={true}/>*/}\n      </div>\n    );\n}\n\nexport default Input;\n\n//className={this.props.title === ''? 'error': ''}\n","import React from 'react';\nimport './Button.css';\n\nconst ButtonClass = (props) => {\n  let loading = props.spiner === true ? <img\n    src=\"https://media0.giphy.com/media/131tNuGktpXGhy/200w.webp?cid=ecf05e474d05d306344ab3d36c11ca3dd5479c7af938e93e&rid=200w.webp\"\n    alt=\"\"/> : '';\n  return (\n    <button className={`button + ${props.type}`} onClick={props.onClick}>\n      {loading}\n      {props.name}\n    </button>\n  )\n}\n\nexport default ButtonClass;\n","import React from \"react\";\r\nimport Input from \"../../../n1-main/m1-ui/common/input/Input\";\r\nimport Button from \"../../../n1-main/m1-ui/common/button/Button\";\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const onClick = () => {\r\n        alert('fdgfhf')\r\n    }\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    let btnStyle ='' || 'primary';\r\n    let inputStyle ='' || 'error';\r\n    return (\r\n        <>\r\n            <div >\r\n                <Input type={inputStyle} placeholder={'placeholder'} value={null} onChange={onChange}/>\r\n                <Button type={btnStyle} name={'name'}  onClick={onClick} spiner={true}/> {/*primary danger loading*/}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\n\r\nconst Restore = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                Restore password\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Restore;","import React from \"react\";\r\n\r\nconst Register = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                Sigin up\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Register;","import React from \"react\";\r\n\r\nconst NewPass = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                New password\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewPass;","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux';\nimport {store} from \"../m2-bll/store\";\nimport {login, newPass, profile, registration, restore} from \"./routes/routes\";\nimport Profile from \"../../n2-features/f1-auth/a5-profile/Profile\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Header from \"./header/Header\";\nimport Login from \"../../n2-features/f1-auth/a1-login/Login\";\nimport Restore from \"../../n2-features/f1-auth/a3-restore/Restore\";\nimport Register from \"../../n2-features/f1-auth/a2-register/Register\";\nimport NewPass from \"../../n2-features/f1-auth/a4-newPass/NewPass\";\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <div className=\"App\">\n                    <Header/>\n                    <div className='main'><Route path={profile} component={Profile}/>\n                        <Route path={login} component={Login}/>\n                        <Route path={registration} component={Register}/>\n                        <Route path={restore} component={Restore}/>\n                        <Route path={newPass} component={NewPass}/>\n                    </div>\n                </div>\n            </Provider>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}