{"version":3,"sources":["n1-main/m1-ui/header/Header.module.css","n1-main/m2-bll/loginReducer.ts","n1-main/m3-dal/registerApi.ts","n1-main/m2-bll/registrationReducer.ts","n1-main/m2-bll/restorePassReducer.ts","n1-main/m2-bll/profileReducer.ts","n1-main/m2-bll/newPassReducer.ts","n1-main/m2-bll/store.ts","n2-features/f1-auth/a5-profile/Profile.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/routes/routes.ts","n1-main/m1-ui/common/input/Input.tsx","n1-main/m1-ui/common/button/Button.tsx","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n2-features/f1-auth/a2-register/r1-ui/RegisterV.tsx","n2-features/f1-auth/a4-newPass/NewPass.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialState","instance","axios","create","baseURL","registerApi","signUp","email","password","a","post","response","data","success","error","actions","registrationSuccess","type","registrationError","rootReducer","combineReducers","login","state","registration","action","restorePass","profile","newPass","store","createStore","applyMiddleware","thunk","Profile","props","Header","className","css","logo","src","alt","to","loginBlock","isAuth","onClick","logout","Input","placeholder","value","onChange","autoFocus","Button","loading","spiner","name","Login","useState","setEmail","pass","setPass","setEmailCallBack","useCallback","e","currentTarget","setPasswordCallBack","href","alert","disable","Restore","RegisterV","setEmailCallback","setPasswordCallback","dispatch","useDispatch","signUpCallback","getState","res","NewPass","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.43d25c01.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__w-dLF\",\"loginBlock\":\"Header_loginBlock__2KSRz\"};","\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n\r\n}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n        return state\r\n}","import axios from \"axios\";\r\n\r\nexport type SignUpDataType = {\r\n    success: boolean;\r\n    error: string;\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:7542/1.0'\r\n})\r\n\r\nexport const registerApi = {\r\n    /*signUp(email: string, password: string) {\r\n        debugger\r\n        return instance.post<RegistrationType>('/auth/register', {email, password})\r\n            .then(response => {\r\n                    debugger\r\n                    response.data\r\n                }\r\n            )\r\n    }*/\r\n\r\n    signUp: async (email: string, password: string) => {\r\n        debugger\r\n        const response = await instance.post<SignUpDataType>('/auth/register', {email, password});\r\n        debugger\r\n        return response.data;\r\n    },\r\n\r\n}\r\n\r\n","import {registerApi} from \"../m3-dal/registerApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {InferActionTypes} from \"./store\";\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n    success: false,\r\n    error: ''\r\n}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS_REDUCER/REGISTER_SUCCESS': {\r\n            return {\r\n                ...state, success: action.success,\r\n            }\r\n        }\r\n        case 'CARDS_REDUCER/REGISTER_ERROR': {\r\n           return {\r\n               ...state,  error: action.error\r\n           }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n// Thunk\r\n\r\nexport const signUp = (email: string, password: string) => async (dispatch: Dispatch<ActionType>, getState: any) => {\r\n    debugger\r\n    const res = await registerApi.signUp(email, password);\r\n    if (res.error) {\r\n        debugger\r\n        dispatch(actions.registrationError(res.error));\r\n        alert(res.error)\r\n    }\r\n    else {\r\n        dispatch(actions.registrationSuccess(true));\r\n        alert('you are registered')\r\n    }\r\n}\r\n\r\n// Action\r\n\r\ntype ActionType = InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    registrationSuccess: (success: boolean) => ({\r\n        type: 'CARDS_REDUCER/REGISTER_SUCCESS',\r\n        success\r\n    } as const),\r\n    registrationError: (error: string) => ({\r\n        type: 'CARDS_REDUCER/REGISTER_ERROR',\r\n        error\r\n    } as const),\r\n\r\n}\r\n\r\n/*export const getCounterSuccess = (counterValue: number) => {\r\n    return {\r\n        type: 'COUNTER_COUNTER_REDUCER/GET_COUNTER_SUCCESS',\r\n        counterValue\r\n    }\r\n}\r\nexport const incCounterSuccess = (value: number) => {\r\n    return {\r\n        type: 'COUNTER_COUNTER_REDUCER/POST_COUNTER_SUCCESS',\r\n        value\r\n    }\r\n}*/\r\n\r\n// Thunk\r\n\r\n/*export const getCounter = () => async (dispatch: Dispatch<ActionType>) => {\r\n    try {\r\n        const value = await counterApi.getCounterValue()\r\n        dispatch(actions.getCounterSuccess(value))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}*/\r\n/*\r\nexport const incCounter = () => async (dispatch: Dispatch<ActionType>, getState: () => AppStateType) => {\r\n    let currentValue = getState().counter.value;\r\n    let newValue = currentValue + 1;\r\n    try {\r\n        const value = await counterApi.incCounterValue(newValue)\r\n        dispatch(actions.incCounterSuccess(value))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}*/\r\n","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const restorePassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const newPassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport {registrationReducer} from \"./registrationReducer\";\r\nimport {restorePassReducer} from \"./restorePassReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {newPassReducer} from \"./newPassReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    restorePass: restorePassReducer,\r\n    profile: profileReducer,\r\n    newPass: newPassReducer\r\n})\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import React from \"react\";\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                Vitaliy\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport css from './Header.module.css';\r\nimport {login, newPass, profile, registration, restore} from \"../routes/routes\";\r\n\r\nconst Header = (props: any) => {\r\n    return (\r\n        <header>\r\n            <div>\r\n                <img className={css.logo}\r\n                     src=\"https://pics.clipartpng.com/midle/Deck_of_Cards_PNG_Clip_Art_Image-2722.png\" alt=\"cards\"/>\r\n            </div>\r\n            <NavLink to={profile}> Profile </NavLink>\r\n            <NavLink to={login}> Sign in </NavLink>\r\n            <NavLink to={registration}> Sign up </NavLink>\r\n            <NavLink to={restore}> Restore password </NavLink>\r\n            <NavLink to={newPass}> New password </NavLink>\r\n            <div className={css.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","export const login = '/login';\r\nexport const registration = '/registration';\r\nexport const restore = '/restorePass';\r\nexport const profile = '/profile';\r\nexport const newPass = '/newPass';","import React from 'react';\nimport './Input.css';\n\ntype OwnPropTypes = {\n    value: string\n    type: string\n    placeholder: string\n    onChange: (e: any) => void\n}\n\nconst Input = (props: OwnPropTypes) => {\n    // let errorClass = this.props.state.error ? 'error' : '';\n    return (\n      <div className='input'>\n        <input type=\"text\" placeholder= {props.placeholder}\n               className={props.type}\n               value={props.value}\n               onChange={props.onChange}\n               autoFocus={true}/>\n               {/*<input type=\"text\" placeholder='Write name'\n               className={css[errorClass]}\n               onKeyPress={this.props.onKeyPress}\n               onChange={this.props.changeTitle}\n               value={this.props.state.title}\n               autoFocus={true}/>*/}\n      </div>\n    );\n}\n\nexport default Input;\n\n//className={this.props.title === ''? 'error': ''}\n","import React from 'react';\r\nimport './Button.css';\r\n\r\ntype OwnPropTypes = {\r\n    name: string\r\n    type: string\r\n    disable: boolean\r\n    spiner?: boolean\r\n    onClick: () => void\r\n}\r\nconst Button = (props: OwnPropTypes) => {\r\n  let loading = props.spiner === true ? <img\r\n    src=\"https://media0.giphy.com/media/131tNuGktpXGhy/200w.webp?cid=ecf05e474d05d306344ab3d36c11ca3dd5479c7af938e93e&rid=200w.webp\"\r\n    alt=\"\"/> : '';\r\n  return (\r\n    <button className={`button + ${props.type}`} onClick={props.onClick}>\r\n      {loading}\r\n      {props.name}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button;\r\n","import React, {useCallback, useState} from \"react\";\r\nimport Input from \"../../../n1-main/m1-ui/common/input/Input\";\r\nimport Button from \"../../../n1-main/m1-ui/common/button/Button\";\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const [email, setEmail] = useState();\r\n    const [pass, setPass] = useState();\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    const signIn = () => {\r\n        alert('fdgfhf')\r\n    }\r\n\r\n\r\n    const setEmailCallBack = useCallback((e) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const setPasswordCallBack = useCallback((e) => {\r\n        setPass(e.currentTarget.value)\r\n    }, [setPass]);\r\n\r\n\r\n    let btnStyle = '' || 'primary';\r\n    let inputStyle = '' || 'error';\r\n    return (\r\n        <>\r\n            <div>\r\n                <form action=\"\">\r\n                    <div>\r\n                        <Input type={inputStyle} placeholder={'e-mail'} value={email} onChange={setEmailCallBack}/>\r\n                    </div>\r\n                    <div>\r\n                        <Input type={inputStyle} placeholder={'password'} value={pass} onChange={setPasswordCallBack}/>\r\n                    </div>\r\n                    <div>\r\n                        <label>\r\n                            <input type={'checkbox'}/> Remember me\r\n                        </label>\r\n                    </div>\r\n                    <div><a href=\"\">Forgot?</a></div>\r\n                    <Button type={btnStyle} name={'Login'} onClick={signIn}\r\n                            spiner={false} disable={false}/> {/*primary danger loading*/}\r\n                </form>\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\n\r\nconst Restore = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                Restore password\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Restore;","import React, {useCallback, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {signUp} from \"../../../../n1-main/m2-bll/registrationReducer\";\r\nimport Input from \"../../../../n1-main/m1-ui/common/input/Input\";\r\nimport Button from \"../../../../n1-main/m1-ui/common/button/Button\";\r\n\r\nconst RegisterV = (props: any) => {\r\n\r\n    const [email, setEmail] = useState('pastuh3@gmail.com');\r\n    const [pass, setPass] = useState('!Asd1234');\r\n\r\n    const setEmailCallback = useCallback((e) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const setPasswordCallback = useCallback((e) => {\r\n        setPass(e.currentTarget.value)\r\n    }, [setPass]);\r\n\r\n    const dispatch = useDispatch();\r\n    const signUpCallback = useCallback(\r\n        () => dispatch(signUp(email, pass)),\r\n        [email, pass, dispatch]\r\n    );\r\n\r\n    let inputEmailStyle = '' || 'error';\r\n    let inputPassStyle = '' || 'error';\r\n    let btnStyle = '' || 'primary';\r\n\r\n    return (\r\n        <>\r\n            <div >\r\n                Sigin up\r\n                <Input type={inputEmailStyle} placeholder={'e-mail'} value={email} onChange={setEmailCallback} />\r\n                <Input type={inputPassStyle} placeholder={'password'} value={pass} onChange={setPasswordCallback} />\r\n                <Button type={btnStyle} name={'Login'} spiner={false} disable={false} onClick={signUpCallback} />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RegisterV;","import React from \"react\";\r\n\r\nconst NewPass = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                New password\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewPass;","import React from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"../m2-bll/store\";\r\nimport {login, newPass, profile, registration, restore} from \"./routes/routes\";\r\nimport Profile from \"../../n2-features/f1-auth/a5-profile/Profile\";\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport Header from \"./header/Header\";\r\nimport Login from \"../../n2-features/f1-auth/a1-login/Login\";\r\nimport Restore from \"../../n2-features/f1-auth/a3-restore/Restore\";\r\nimport RegisterV from \"../../n2-features/f1-auth/a2-register/r1-ui/RegisterV\";\r\nimport NewPass from \"../../n2-features/f1-auth/a4-newPass/NewPass\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <div className=\"App\">\r\n                    <Header/>\r\n                    <div className='main'><Route path={profile} component={Profile}/>\r\n                        <Route path={login} component={Login}/>\r\n                        <Route path={registration} component={RegisterV}/>\r\n                        <Route path={restore} component={Restore}/>\r\n                        <Route path={newPass} component={NewPass}/>\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}