{"version":3,"sources":["n2-features/f3-cards/с1-packs/p1-ui/Packs.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m3-dal/authAPI.ts","n1-main/m2-bll/loginReducer.ts","n1-main/m3-dal/registerApi.ts","n1-main/m2-bll/registrationReducer.ts","n1-main/m2-bll/restorePassReducer.ts","n1-main/m2-bll/profileReducer.ts","n1-main/m2-bll/newPassReducer.ts","n1-main/m3-dal/packsAPI.ts","n2-features/f3-cards/с1-packs/p2-bll/packsReducer.ts","n1-main/m2-bll/store.ts","n2-features/f1-auth/a5-profile/Profile.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/routes/routes.ts","n1-main/m1-ui/common/input/Input.tsx","n1-main/m1-ui/common/button/Button.tsx","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a3-restore/Restore.tsx","n2-features/f1-auth/a2-register/r1-ui/RegisterV.tsx","n2-features/f1-auth/a4-newPass/NewPass.tsx","n2-features/f3-cards/с1-packs/p1-ui/Packs.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","axiosInstance","axios","create","baseURL","authAPI","email","password","rememberMe","post","then","res","LOGIN_SUCCESS","LOGIN_ERROR","initialState","errorMessage","isAuth","isDisabled","isFetching","token","instance","registerApi","signUp","a","response","data","success","error","actions","registrationSuccess","type","registrationError","packsApi","getPacks","get","cardPacks","name","grade","pack","rootReducer","combineReducers","login","state","action","registration","restorePass","profile","newPass","packs","store","createStore","applyMiddleware","thunk","Profile","props","Header","className","css","logo","src","alt","to","loginBlock","onClick","logout","Input","placeholder","value","onChange","autoFocus","Button","small","loading","spiner","Login","useSelector","useState","setEmail","pass","setPass","setRememberMe","setEmailCallBack","useCallback","e","currentTarget","setPasswordCallBack","setRememberMeCallBack","checked","dispatch","useDispatch","signInCallback","Cookies","set","alert","signIn","href","disable","Restore","RegisterV","React","memo","console","log","setEmailCallback","setPasswordCallback","signUpCallback","getState","inputEmailStyle","inputPassStyle","NewPass","Packs","useEffect","getPacksTh","delPacksOnClick","packsArr","map","p","column","columnOpt","mainContent","table","App","path","component","render","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister","catch","message"],"mappings":"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","file":"static/js/main.a716fea4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Packs_mainContent__VvYwV\",\"table\":\"Packs_table__29KSz\",\"tableHeader\":\"Packs_tableHeader__2HR8s\",\"column\":\"Packs_column__2RuEQ\",\"columnOpt\":\"Packs_columnOpt__368Xd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3doNV\",\"loginBlock\":\"Header_loginBlock__2ZNMB\"};","import axios from \"axios\"\r\n\r\ntype ResponseLoginType = {\r\n    email: string\r\n    name: string\r\n    isAdmin: boolean\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    success: boolean\r\n\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: \"http://localhost:7542/1.0\"\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return axiosInstance.post<ResponseLoginType>(\"/auth/login/\", {\r\n            email,\r\n            password,\r\n            rememberMe})\r\n            .then(res => {\r\n                return res\r\n            })\r\n    }\r\n}","import {authAPI} from \"../m3-dal/authAPI\";\r\nimport {AppStateType} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport Cookies from 'js-cookie';\r\n\r\nconst LOGIN_SUCCESS = \"CARDS/LOGINREDUCER/LOGIN_SUCCESS\"\r\nconst LOGIN_ERROR = \"CARDS/LOGINREDUCER/LOGIN_ERROR\"\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const initialState = {\r\n    errorMessage: \"\",\r\n    isAuth: false,\r\n    isDisabled: false,\r\n    isFetching: false,\r\n    token: ''\r\n}\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAuth: true,\r\n                isDisabled: true,\r\n                isFetching: true,\r\n                token: action.token\r\n            }\r\n        }\r\n        case LOGIN_ERROR: {\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth,\r\n                errorMessage: action.errorMessage,\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst loginSuccsess = (token: string) => {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        token\r\n    }\r\n}\r\nconst showError = () => {\r\n    return {\r\n        type: LOGIN_ERROR,\r\n        errorMessage: \"smth wrong\"\r\n    }\r\n}\r\nconst disableBtn = (isDisabled: boolean) => {\r\n\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, any>;\r\n\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, any>;\r\n\r\n//thunk\r\nexport const signIn = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch: DispatchType) => {\r\n    try {\r\n        const res = await authAPI.login(email, password, rememberMe)\r\n        Cookies.set('token', res.data.token)\r\n        // const token = Cookies.get('token')\r\n        dispatch(loginSuccsess(res.data.token))\r\n    } catch (e) {\r\n        dispatch(showError())\r\n        alert(e.response.data.error)\r\n    }\r\n    /*authAPI.login(email, password, rememberMe)\r\n        .then(res => {\r\n\r\n            dispatch(loginSuccsess())\r\n        }).catch((e) => {\r\n        // if()\r\n        dispatch(showError())\r\n    })*/\r\n}","import axios from \"axios\";\r\n\r\nexport type SignUpDataType = {\r\n    success: boolean;\r\n    error: string;\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:7542/1.0'\r\n})\r\n\r\nexport const registerApi = {\r\n    /*signUp(email: string, password: string) {\r\n        debugger\r\n        return instance.post<RegistrationType>('/auth/register', {email, password})\r\n            .then(response => {\r\n                    debugger\r\n                    response.data\r\n                }\r\n            )\r\n    }*/\r\n\r\n    signUp: async (email: string, password: string) => {\r\n        const response = await instance.post<SignUpDataType>('/auth/register', {email, password});\r\n        return response.data;\r\n    }\r\n}\r\n\r\n","import {registerApi} from \"../m3-dal/registerApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {InferActionTypes} from \"./store\";\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n    success: false,\r\n    error: ''\r\n}\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS_REDUCER/REGISTER_SUCCESS': {\r\n            return {\r\n                ...state, success: action.success,\r\n            }\r\n        }\r\n        case 'CARDS_REDUCER/REGISTER_ERROR': {\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n// Thunk\r\n\r\nexport const signUp = (email: string, password: string) => async (dispatch: Dispatch<ActionType>, getState: any) => {\r\n    try {\r\n        const res = await registerApi.signUp(email, password);\r\n        dispatch(actions.registrationSuccess(true));\r\n        alert('you are registered')\r\n    } catch (e) {\r\n        dispatch(actions.registrationError(e.response.data.error));\r\n        alert(e.response.data.error)\r\n    }\r\n}\r\n\r\n// Action\r\n\r\ntype ActionType = InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    registrationSuccess: (success: boolean) => ({\r\n        type: 'CARDS_REDUCER/REGISTER_SUCCESS',\r\n        success\r\n    } as const),\r\n    registrationError: (error: string) => ({\r\n        type: 'CARDS_REDUCER/REGISTER_ERROR',\r\n        error\r\n    } as const)\r\n}\r\n","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const restorePassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {}\r\n\r\nexport const newPassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}","import axios from \"axios\"\r\n\r\ntype PackType = {\r\n    _id: string;\r\n    user_id: string;\r\n    name: string;\r\n    path: string;\r\n    grade: number;\r\n    shots: number;\r\n    type: string;\r\n    rating: number;\r\n    more_id: string;\r\n    created: string;\r\n    updated: string;\r\n}\r\n\r\nexport type PacksStateType = {\r\n    cardPacks: PackType[];\r\n    success: boolean;\r\n    token: string;\r\n    error: string;\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:7542/1.0'\r\n})\r\n\r\nexport const packsApi = {\r\n    getPacks: async (token: string) => {\r\n        const response = await instance.get<PacksStateType>(`/cards/pack?token=${token}`);\r\n        return response.data;\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {InferActionTypes} from \"../../../../n1-main/m2-bll/store\";\r\nimport {packsApi} from \"../../../../n1-main/m3-dal/packsAPI\";\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n    cardPacks: [\r\n        {\r\n            name: 'first pack',\r\n            grade: '10',\r\n            pack: {}\r\n        },\r\n        {\r\n            name: 'second pack',\r\n            grade: '7',\r\n            pack: {}\r\n        }\r\n    ]\r\n}\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS_REDUCER/SET_PACKS': {\r\n            return {\r\n                ...state, cardPacks: action.cardPacks,\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n// Thunk\r\n\r\nexport const getPacksTh = (token: string): any  => async (dispatch: Dispatch<ActionType>) => {\r\n    // try take token from getState\r\n    let response = await packsApi.getPacks(token);\r\n    dispatch(actions.getPacks(response.cardPacks))\r\n    /*try {\r\n        const res = await registerApi.signUp(email, password);\r\n        dispatch(actions.registrationSuccess(true));\r\n        alert('you are registered')\r\n    } catch (e) {\r\n        dispatch(actions.registrationError(e.response.data.error));\r\n        alert(e.response.data.error)\r\n    }*/\r\n}\r\n\r\n// Action\r\n\r\ntype ActionType = InferActionTypes<typeof actions>\r\n\r\nconst actions = {\r\n    getPacks: (cardPacks: Array<any>) => ({\r\n        type: 'PACKS_REDUCER/SET_PACKS',\r\n        cardPacks\r\n    } as const)\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport {registrationReducer} from \"./registrationReducer\";\r\nimport {restorePassReducer} from \"./restorePassReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {newPassReducer} from \"./newPassReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {packsReducer} from \"../../n2-features/f3-cards/с1-packs/p2-bll/packsReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    restorePass: restorePassReducer,\r\n    profile: profileReducer,\r\n    newPass: newPassReducer,\r\n    packs: packsReducer\r\n})\r\n\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import React from \"react\";\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                Vitaliy\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport css from './Header.module.css';\r\nimport {login, newPass, packs, profile, registration, restore} from \"../routes/routes\";\r\n\r\nconst Header = (props: any) => {\r\n    return (\r\n        <header>\r\n            <div>\r\n                <img className={css.logo}\r\n                     src=\"https://pics.clipartpng.com/midle/Deck_of_Cards_PNG_Clip_Art_Image-2722.png\" alt=\"cards\"/>\r\n            </div>\r\n            <NavLink to={profile}> Profile </NavLink>\r\n            <NavLink to={login}> Sign in </NavLink>\r\n            <NavLink to={registration}> Sign up </NavLink>\r\n            <NavLink to={restore}> Restore password </NavLink>\r\n            <NavLink to={newPass}> New password </NavLink>\r\n            <NavLink to={packs}> Packs </NavLink>\r\n            <NavLink to={'/'}> Error 404 </NavLink>\r\n            <div className={css.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","export const login = '/login';\r\nexport const registration = '/registration';\r\nexport const restore = '/restorePass';\r\nexport const profile = '/profile';\r\nexport const newPass = '/newPass';\r\nexport const packs = '/cards/pack';","import React from 'react';\r\nimport './Input.css';\r\n\r\ntype OwnPropTypes = {\r\n    value: string\r\n    type: string\r\n    placeholder: string\r\n    onChange: (e: any) => void\r\n}\r\n\r\nconst Input = (props: OwnPropTypes) => {\r\n    // let errorClass = this.props.state.error ? 'error' : '';\r\n    return (\r\n      <div className='input'>\r\n        <input type=\"text\" placeholder= {props.placeholder}\r\n               className={props.type}\r\n               value={props.value}\r\n               onChange={props.onChange}\r\n               autoFocus={true}/>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\ntype OwnPropTypes = {\r\n    name: string\r\n    type: string\r\n    disable: boolean\r\n    spiner?: boolean\r\n    small?: boolean\r\n    onClick: () => void\r\n}\r\nconst Button = (props: OwnPropTypes) => {\r\n    let small = props.small? 'small': '';\r\n  let loading = props.spiner === true ? <img\r\n    src=\"https://media0.giphy.com/media/131tNuGktpXGhy/200w.webp?cid=ecf05e474d05d306344ab3d36c11ca3dd5479c7af938e93e&rid=200w.webp\"\r\n    alt=\"\"/> : '';\r\n  return (\r\n    <button className={`button + ${props.type} + ${small}`} onClick={props.onClick}>\r\n      {loading}\r\n      {props.name}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button;\r\n","import React, {useCallback, useState} from \"react\";\r\nimport Input from \"../../../n1-main/m1-ui/common/input/Input\";\r\nimport Button from \"../../../n1-main/m1-ui/common/button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {signIn} from \"../../../n1-main/m2-bll/loginReducer\";\r\nimport {AppStateType} from \"../../../n1-main/m2-bll/store\";\r\n\r\nconst Login = () => {\r\n\r\n    const {isFetching, isDisabled} = useSelector((state: AppStateType) => state.login)\r\n    const token = useSelector((state: AppStateType) => state.login.token);\r\n\r\n    const [email, setEmail] = useState('pastuh3@gmail.com');\r\n    const [pass, setPass] = useState('!Asd1234');\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n    const setEmailCallBack = useCallback((e) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const setPasswordCallBack = useCallback((e) => {\r\n        setPass(e.currentTarget.value)\r\n    }, [setPass]);\r\n\r\n    const setRememberMeCallBack = useCallback((e) => {\r\n        setRememberMe(e.currentTarget.checked)\r\n    }, [setRememberMe]);\r\n\r\n    const dispatch = useDispatch();\r\n    const signInCallback = useCallback(\r\n        () => dispatch(signIn(email, pass, rememberMe)),\r\n        [email, pass, rememberMe, dispatch]\r\n    );\r\n\r\n    /*if (isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }*/\r\n\r\n    /*if(isFetching) {\r\n        return {Preloader}\r\n    }*/\r\n\r\n    let btnStyle = '' || 'primary';\r\n    let inputStyle = '' || 'error';\r\n    return (\r\n\r\n        <>\r\n            <div>{token}\r\n                <div>\r\n                    <Input type={inputStyle} placeholder={'e-mail'} value={email} onChange={setEmailCallBack}/>\r\n                </div>\r\n                <div>\r\n                    <Input type={inputStyle} placeholder={'password'} value={pass} onChange={setPasswordCallBack}/>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        <input type={'checkbox'} checked={rememberMe} onClick={setRememberMeCallBack}/> Remember me\r\n                    </label>\r\n                </div>\r\n                <div><a href=\"\">Forgot?</a></div>\r\n                <Button type={btnStyle} name={'Login'} onClick={signInCallback}\r\n                        spiner={isFetching} disable={isDisabled}/> {/*primary danger loading*/}\r\n\r\n            </div>\r\n            {/*{isFetching? <Preloader/>: <div>\r\n                <div>\r\n                    <Input type={inputStyle} placeholder={'e-mail'} value={email} onChange={setEmailCallBack}/>\r\n                </div>\r\n                <div>\r\n                    <Input type={inputStyle} placeholder={'password'} value={pass} onChange={setPasswordCallBack}/>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        <input type={'checkbox'} checked={rememberMe} onClick={setRememberMeCallBack}/> Remember me\r\n                    </label>\r\n                </div>\r\n                <div><a href=\"\">Forgot?</a></div>\r\n                <Button type={btnStyle} name={'Login'} onClick={signInCallback}\r\n                        spiner={isFetching} disable={isDisabled}/> primary danger loading\r\n\r\n            </div>}*/}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\n\r\nconst Restore = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                Restore password\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Restore;","import React, {useCallback, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Input from \"../../../../n1-main/m1-ui/common/input/Input\";\r\nimport Button from \"../../../../n1-main/m1-ui/common/button/Button\";\r\nimport {signUp} from \"../../../../n1-main/m2-bll/registrationReducer\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {login} from \"../../../../n1-main/m1-ui/routes/routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype OwnPropsType = {\r\n    email: string;\r\n    pass: string;\r\n    setEmail: () => void;\r\n    setPass: () => void;\r\n}\r\n\r\nconst RegisterV = React.memo((props: OwnPropsType) => {\r\n\r\n    console.log('register render');\r\n\r\n    const [email, setEmail] = useState('pastuh3@gmail.com');\r\n    const [pass, setPass] = useState('!Asd1234');\r\n\r\n    const setEmailCallback = useCallback((e) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const setPasswordCallback = useCallback((e) => {\r\n        setPass(e.currentTarget.value)\r\n    }, [setPass]);\r\n\r\n    const dispatch = useDispatch();\r\n    const signUpCallback = useCallback(() => {\r\n        dispatch(signUp(email, pass))\r\n    }, [email, pass, dispatch]);\r\n\r\n    const error = useSelector((state: AppStateType) => state.registration.error);\r\n    const success = useSelector((state: AppStateType) => state.registration.success);\r\n    if (success) {\r\n        return <Redirect to={login}/>\r\n    }\r\n\r\n    let inputEmailStyle = error || '';\r\n    let inputPassStyle = error || '';\r\n    let btnStyle = '' || 'primary';\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                Sigin up\r\n                {error ? <div>{error}</div> : ''}\r\n                <Input type={inputEmailStyle} placeholder={'e-mail'} value={email} onChange={setEmailCallback}/>\r\n                <Input type={inputPassStyle} placeholder={'password'} value={pass} onChange={setPasswordCallback}/>\r\n                <Button type={btnStyle} name={'Login'} spiner={false} disable={false} onClick={signUpCallback}/>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default RegisterV;","import React from \"react\";\r\n\r\nconst NewPass = (props: any) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                New password\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewPass;","import React, {useEffect} from \"react\";\r\nimport css from './Packs.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport Button from \"../../../../n1-main/m1-ui/common/button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {getPacksTh} from \"../p2-bll/packsReducer\";\r\n\r\ntype OwnPropsType = {\r\n    getPacks: () => void;\r\n}\r\n\r\nconst Packs = React.memo((props: OwnPropsType) => {\r\n\r\n    console.log('packs render');\r\n    const token = useSelector((state: AppStateType) => state.login.token);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getPacksTh(token))\r\n    }, [token, dispatch])\r\n\r\n    const {cardPacks} = useSelector((store: AppStateType) => store.packs);\r\n\r\n    let delPacksOnClick = () => {\r\n        alert('delete')\r\n    }\r\n\r\n    let btnStyle = '' || 'primary';\r\n\r\n    let packsArr = cardPacks.map(p => {\r\n        return <tr>\r\n            <td className={css.column}>{p.name}</td>\r\n            <td className={css.column}>{p.grade}</td>\r\n            <td className={css.columnOpt}>\r\n                <Button name={'delete'} type={btnStyle} small={true} disable={true} onClick={delPacksOnClick}/>\r\n                <Button name={'update'} type={btnStyle} small={true} disable={true} onClick={delPacksOnClick}/>\r\n                <NavLink to='/'> Cards </NavLink>\r\n                <NavLink to='/'> Learn </NavLink>\r\n            </td>\r\n        </tr>\r\n    })\r\n    return (\r\n        <>\r\n            <div className={css.mainContent}>\r\n                <div>Packs page</div>\r\n                <table className={css.table}>\r\n                    <tr>\r\n                        <td className={css.column}>Packs</td>\r\n                        <td className={css.column}>Grade</td>\r\n                        <td className={css.columnOpt}>Option</td>\r\n                    </tr>\r\n                    {packsArr}\r\n                </table>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default Packs;","import React from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"../m2-bll/store\";\r\nimport {login, newPass, packs, profile, registration, restore} from \"./routes/routes\";\r\nimport Profile from \"../../n2-features/f1-auth/a5-profile/Profile\";\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport Header from \"./header/Header\";\r\nimport Login from \"../../n2-features/f1-auth/a1-login/Login\";\r\nimport Restore from \"../../n2-features/f1-auth/a3-restore/Restore\";\r\nimport RegisterV from \"../../n2-features/f1-auth/a2-register/r1-ui/RegisterV\";\r\nimport NewPass from \"../../n2-features/f1-auth/a4-newPass/NewPass\";\r\nimport Packs from \"../../n2-features/f3-cards/с1-packs/p1-ui/Packs\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <div className=\"App\">\r\n                    <Header/>\r\n                    <div className='main'>\r\n                        <Route path={profile} component={Profile}/>\r\n                        <Route path={login} component={Login}/>\r\n                        <Route path={registration} component={RegisterV}/>\r\n                        <Route path={restore} component={Restore}/>\r\n                        <Route path={newPass} component={NewPass}/>\r\n                        <Route path={packs} component={Packs}/>\r\n                        <Route path='/' render={() => <div>Error 404</div> } exact={true}/>\r\n                    </div>\r\n                </div>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}